@model Clockwork.Web.Models.HomeModel

<script>

    function postData(url, data) {
        var headers = new Headers();
        headers.append('Content-Type', 'application/json');
        headers.append('Accept', 'application/json');

        return fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(data),
        }).then((response) => {
            return response.json();
        });
    }

    function getData(url) {
        return fetch(url).then(response => {
            return response.json();
        });
    }

    function createTimeQuery() {
        var tz = document.getElementById("timeZoneSelect").value;
        var data = { "TimeZone": tz };
        postData("http://localhost:53579/home/createtimequery", data).then((response) => {
            var currTime = document.getElementById("currentTime");
            currTime.innerHTML = moment(response.Time).format("MM/DD/YYYY hh:mm:ss A");
            currTime.parentNode.classList.remove("d-none");

            var timeQueryTable = document.getElementById("timeQueryTable");
            var row = document.getElementById("hiddenRow").cloneNode(true);
            row.getElementsByClassName("time")[0].innerHTML = moment(response.Time).format("MM/DD/YYYY hh:mm:ss A");
            row.getElementsByClassName("tz")[0].innerHTML = response.TimeZone;
            row.getElementsByClassName("ip")[0].innerHTML = response.ClientIp;
            row.getElementsByClassName("UTC")[0].innerHTML = moment(response.UTCTime).utc().format("MM/DD/YYYY hh:mm:ss A");
            row.removeAttribute("class");
            row.removeAttribute("id");

            timeQueryTable.appendChild(row);
        });
    }

    function formatDate(dateString) {
        return moment(dateString).format("MM/DD/YYYY hh:mm:ss A");
    }
</script>

<h2 class="text-center mb-3 mt-3">AWH Clockwork Project @ViewData["Version"] on @ViewData["Runtime"]!</h2>

<div class="input-group mb-3">
    <select class="custom-select" id="timeZoneSelect">
        @foreach (var tz in Model.TimeZones)
        {
            <option value="@tz.Id">@tz.Id</option>
        }
    </select>
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" onclick="createTimeQuery()">Get the time</button>
    </div>
</div>

<h3 class="d-none text-center mb-3">Current date and time is: <span id="currentTime"></span></h3>

<table class="table table-striped table-bordered table-hover text-center">
    <thead>
        <tr>
            <th scope="col">Time</th>
            <th scope="col">Time Zone</th>
            <th scope="col">Client IP</th>
            <th scope="col">UTC Time</th>
        </tr>
    </thead>
    <tbody id="timeQueryTable">
        <tr id="hiddenRow" class="hide d-none"><td class="time"></td><td class="tz"></td><td class="ip"></td><td class="UTC"></td></tr>
        @foreach (var timeQuery in Model.TimeQueries)
        {
            <tr>
                <td>@timeQuery.Time.ToString("MM/dd/yyyy HH:mm:ss tt")</td>
                <td>@timeQuery.TimeZone</td>
                <td>@timeQuery.ClientIp</td>
                <td>@timeQuery.UTCTime.ToString("MM/dd/yyyy HH:mm:ss tt")</td>
            </tr>
        }
    </tbody>
</table>

<div id="mytoast" role="alert" aria-live="assertive" aria-atomic="true" class="toast" data-autohide="false">
    <div class="toast-header">
        <img src="..." class="rounded mr-2" alt="...">
        <strong class="mr-auto">Bootstrap</strong>
        <small>11 mins ago</small>
        <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="toast-body">
        Hello, world! This is a toast message.
    </div>
</div>